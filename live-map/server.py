# ---------- server.py ----------
from flask import Flask, request, jsonify, render_template
from flask_socketio import SocketIO
from flask_cors import CORS

map_data = [[[1, 1, 1], [1, 8, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]], [[1, 1, 1], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 8, 1]], [[1, 1, 1], [0, 0, 0], [0, 0, 3], [0, 0, 0], [0, 0, 0], [0, 0, 8], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 1, 1]], [[1, 1, 1], [0, 0, 8], [0, 0, 0], [1, 0, 3], [1, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [2, 0, 0], [2, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 1, 1]], [[1, 1, 1], [0, 0, 0], [0, 0, 0], [1, 0, 0], [0, 2, 3], [0, 2, 0], [0, 2, 0], [0, 2, 0], [2, 2, 0], [0, 8, 0], [0, 2, 0], [0, 2, 0], [0, 0, 0], [0, 0, 0], [0, 0, 8], [1, 1, 1]], [[1, 1, 1], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 2, 0], [0, 0, 3], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 2, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 1, 1]], [[1, 1, 1], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 2, 0], [0, 0, 0], [3, 3, 3], [3, 3, 0], [3, 3, 0], [3, 3, 0], [0, 0, 0], [0, 2, 0], [0, 8, 0], [0, 0, 0], [0, 0, 0], [1, 1, 1]], [[1, 1, 1], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 2, 0], [0, 0, 0], [3, 3, 0], [0, 0, 3], [0, 0, 0], [8, 3, 0], [0, 0, 0], [0, 2, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 1, 1]], [[1, 1, 1], [0, 0, 0], [0, 0, 0], [0, 0, 0], [8, 2, 0], [0, 0, 0], [3, 3, 0], [0, 0, 0], [0, 0, 3], [3, 3, 0], [0, 0, 0], [0, 2, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 1, 1]], [[1, 1, 1], [0, 0, 0], [2, 0, 0], [0, 0, 0], [0, 2, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 3], [0, 0, 0], [0, 2, 0], [0, 0, 0], [0, 8, 0], [0, 0, 0], [1, 1, 1]], [[1, 1, 1], [0, 0, 0], [2, 0, 0], [0, 0, 0], [0, 2, 0], [0, 2, 0], [0, 2, 0], [0, 2, 0], [0, 2, 0], [4, 2, 0], [4, 2, 3], [4, 2, 0], [4, 0, 0], [0, 0, 0], [0, 0, 0], [1, 1, 1]], [[1, 1, 1], [0, 0, 0], [2, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 8, 3], [0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 1, 1]], [[1, 1, 1], [0, 0, 0], [2, 0, 0], [2, 0, 0], [2, 0, 0], [2, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 3], [0, 0, 0], [0, 0, 0], [1, 1, 1]], [[1, 1, 1], [0, 0, 0], [0, 8, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 8], [0, 0, 3], [0, 0, 0], [1, 1, 1]], [[1, 1, 1], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 3], [1, 1, 1]], [[1, 1, 1], [8, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]]

players = [
    {"row": 2.5,  "col": 2.5, "mapIdx": 1},
    {"row": 12.2, "col": 10.8,"mapIdx": 1}
]

sprites = [
    {"row": 5.5,  "col": 8.5, "mapIdx": 0},
    {"row": 7.2,  "col": 3.3, "mapIdx": 0},
    {"row": 9.8, "col": 13.1, "mapIdx": 2},
    {"row": 7.8, "col": 13.1, "mapIdx": 0},
    {"row": 6.8, "col": 13.1, "mapIdx": 1},
    {"row": 0.8, "col": 13.1, "mapIdx": 0}
]


app    = Flask(__name__)
CORS(app)  # allow cross‚Äêorigin requests
socket = SocketIO(app, async_mode="threading",
                  cors_allowed_origins="*")

world_state = {
    "map": map_data,
    "players":players,
    "sprites": sprites,
    "keys": False,
    "drawn": False,
    "chests": False
}

# ------------- ROUTES ------------------------
@app.get("/")
def root():
    return render_template("client_map.html")

@app.get("/state")
def get_state():
    return jsonify(world_state)
@socket.on("connect")
def _on_connect():
    print("üö™ client connected", request.sid)

@socket.on("disconnect")
def _on_disconnect():
    print("‚ùå client disconnected", request.sid)
@app.post("/update")
def update():
    global world_state
    data = request.get_json(force=True)
    

    for k in ("map", "players", "sprites","chests","keys"):
        if k in data:
            world_state[k] = data[k]
            if k == "keys":
                print(world_state[k])
    
    
    if "map" in data:        
        socket.emit("state", world_state, to=None)
        world_state["drawn"] = True
        #print("Map received")


    
    #print(data)
    socket.emit("state", world_state, to=None)

    return "Succesufl braodcast", 200

# ------------- ENTRY POINT -------------------
if __name__ == "__main__":
    # With async_mode="asyncio", the built-in web-server is aiohttp‚Äôs WSGI wrapper.
    socket.run(app, host="0.0.0.0", port=5555, debug=True)